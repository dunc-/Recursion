import java.util.ArrayList;
import java.util.Collections;

public class RecursiveTester {
	public static void main(String[] args) {
		Recursive r = new Recursive();

		// Test 1: decimal to binary
		String actualBinary = r.getBinary(27);
		String expectedBinary = "11011";
		if (actualBinary.equals(expectedBinary))
			System.out.println("Test 1 passed. get binary.");
		else
			System.out.println("Test 1 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);

		// Test 2: decimal to binary
		actualBinary = r.getBinary(47);
		expectedBinary = "101111";
		if (actualBinary.equals(expectedBinary))
			System.out.println("Test 2 passed. get binary.");
		else
			System.out.println("Test 2 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);

		// Test 3: decimal to binary
		actualBinary = r.getBinary(314);
		expectedBinary = "100111010";
		if (actualBinary.equals(expectedBinary))
			System.out.println("Test 3 passed. get binary.");
		else
			System.out.println("Test 3 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);

		// Test 4: reverse a string
		String actualRev = r.revString("kayak");
		String expectedRev = "kayak";
		if (actualRev.equals(expectedRev))
			System.out.println("Test 4 passed. reverse string.");
		else
			System.out.println("Test 4 failed. reverse string. expected: " + expectedRev + ", actual: " + actualRev);

		// Test 5: reverse a string
		actualRev = r.revString("Test String");
		expectedRev = "gnirtS tseT";
		if (actualRev.equals(expectedRev))
			System.out.println("Test 5 passed. reverse string.");
		else
			System.out.println("Test 5 failed. reverse string. expected: " + expectedRev + ", actual: " + actualRev);

		// Test 6: reverse a string
		actualRev = r.revString("data structures");
		expectedRev = "serutcurts atad";
		if (actualRev.equals(expectedRev))
			System.out.println("Test 6 passed. reverse string.");
		else
			System.out.println("Test 6 failed. reverse string. expected: " + expectedRev + ", actual: " + actualRev);

		// Test 7: next number is double
		int[] numsForDouble = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};
		int actualDouble = r.nextIsDouble(numsForDouble);
		int expectedDouble = 10;
		if (actualDouble == expectedDouble)
			System.out.println("Test 7 passed. next is double.");
		else
			System.out.println("Test 7 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble);

		// Test 8: next number is double
		numsForDouble = new int[]{2, 5, 11, 23, 24, 49, -11};
		actualDouble = r.nextIsDouble(numsForDouble);
		expectedDouble = 0;
		if (actualDouble == expectedDouble)
			System.out.println("Test 8 passed. next is double.");
		else
			System.out.println("Test 8 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble);

		// Test 9: next number is double
		numsForDouble = new int[]{2, 4, 9, 18, 36, 72, 74};
		actualDouble = r.nextIsDouble(numsForDouble);
		expectedDouble = 4;
		if (actualDouble == expectedDouble)
			System.out.println("Test 9 passed. next is double.");
		else
			System.out.println("Test 9 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble);

		// Test 10: phone mnemonics
		ArrayList<String> mnemonics = r.listMnemonics("12");
		ArrayList<String> expected = new ArrayList<String>();
		expected.add("1A");
		expected.add("1B");
		expected.add("1C");
		if (mnemonics.equals(expected))
			System.out.println("Test 10 passed. Phone mnemonics.");
		else
			System.out.println("Test 10 failed. Phone mnemonics.");

		// Test 11: phone mnemonics
		mnemonics = r.listMnemonics("32");
		Collections.sort(mnemonics);
		expected.clear();
		expected.add("DA");
		expected.add("DB");
		expected.add("DC");
		expected.add("EA");
		expected.add("EB");
		expected.add("EC");
		expected.add("FA");
		expected.add("FB");
		expected.add("FC");
		Collections.sort(expected);
		if( mnemonics.equals(expected))
			System.out.println("Test 11 passed. Phone mnemonics.");
		else
			System.out.println("Test 11 failed. Phone mnemonics.");

		// Test 12: phone mnemonics
		mnemonics = r.listMnemonics("111");
		expected.clear();
		expected.add("111");
		if( mnemonics.equals(expected))
			System.out.println("Test 12 passed. Phone mnemonics.");
		else
			System.out.println("Test 12 failed. Phone mnemonics.");


		int[][] world = {{5,5,5,5,5,5},
				{5,5,5,5,4,5},
				{5,5,5,5,5,5},
				{5,5,5,5,5,5},
				{5,8,5,5,5,5},
				{5,5,4,5,5,5},
				{5,5,3,2,1,5},
				{5,5,5,5,0,5}};

		// Test 13: water can flow off map
		if(r.canFlowOffMap(world,7,0))
			System.out.println( "Test 13 passed. can flow off map.");
		else
			System.out.println( "Test 13 failed. can flow off map.");

		// Test 14: water can flow off map
		if(!r.canFlowOffMap(world,1,4))
			System.out.println( "Test 14 passed. can flow off map.");
		else
			System.out.println( "Test 14 failed. can flow off map.");

		// Test 15: water can flow off map
		if(r.canFlowOffMap(world,4,1))
			System.out.println( "Test 15 passed. can flow off map.");
		else
			System.out.println( "Test 15 failed. can flow off map.");

		// Test 16: sudoku solver
		String puzzle1 = "006000500200060107940000000000000000700020439000009050008091000000000000009000005";
		int[][] board = stringToBoard(puzzle1);
		int[][] result = r.getSudokoSolution(board);
		String actualBoard = boardToString(result);
		String expectedBoard = "136247598285963147947158263392475681751826439864319752428591376573682914619734825";
		if(actualBoard.equals(expectedBoard))
			System.out.println( "Test 16 passed. sudoko solver.");
		else {
			System.out.println("Test 22 failed. sudoku solver:");
			System.out.println("Expected board:");
			printBoard(stringToBoard(expectedBoard));
			System.out.println();
			System.out.println("Actual board:");
			printBoard(result);
		}

		// Test 17: sudoku solver
		String puzzle2 = "130050000000000700004607000000789000000100032000000070020003005009060000000000004";
		board = stringToBoard(puzzle2);
		result = r.getSudokoSolution(board);
		actualBoard = boardToString(result);
		expectedBoard = "137254689256398741894617253342789516785146932961532478628473195419865327573921864";
		if(actualBoard.equals(expectedBoard))
			System.out.println( "Test 17 passed. sudoko solver.");
		else {
			System.out.println("Test 17 failed. sudoku solver:");
			System.out.println("Expected board:");
			printBoard(stringToBoard(expectedBoard));
			System.out.println();
			System.out.println("Actual board:");
			printBoard(result);
		}

		// Test 18: sudoku solver
		String puzzle3 = "800000000604000870000000530000070000049000000000010700500082060000100020100000008";
		assert puzzle3.length() == 81;
		board = stringToBoard(puzzle3);
		result = r.getSudokoSolution(board);
		actualBoard = boardToString(result);
		expectedBoard = "813257496654391872972648531381576249749823615265419783537982164498165327126734958";
		if(actualBoard.equals(expectedBoard))
			System.out.println( "Test 18 passed. sudoko solver.");
		else {
			System.out.println("Test 18 failed. sudoku solver:");
			System.out.println("Expected board:");
			printBoard(stringToBoard(expectedBoard));
			System.out.println();
			System.out.println("Actual board:");
			printBoard(result);
		}

		// Test 19: closest teams
		int[] abilities = {1, 2, 3, 5, 5, 10, 8};
		if (r.minDifference(2, abilities) == 0)
			System.out.println("Test 19 passed. min difference.");
		else
			System.out.println("Test 19 failed. min difference.");

		// Test 20: closest teams
		int[] abilities1 = {2, 2, 3, 6, 9, 10, 12, 23};
		if(r.minDifference(3, abilities1) == 1)
			System.out.println( "Test 20 passed. min difference.");
		else
			System.out.println( "Test 20 failed. min difference.");
		
		// Test 21: closest teams
		int[] abilities2 = {1, 3, 7, 10, 13, 17, 34, 72};
		if(r.minDifference(2, abilities2) == 1)
			System.out.println( "Test 21 passed. min difference.");
		else
			System.out.println( "Test 21 failed. min difference.");
	}

	private static String boardToString(int[][] board) {
		StringBuilder result = new StringBuilder(81);
		for(int r = 0; r < board.length; r++)
			for(int c = 0; c < board[r].length; c++)
				result.append(board[r][c]);
		return result.toString();
	}

	private static int[][] stringToBoard(String puzzle) {
		int[][] result = new int[Recursive.BOARD_SIZE][Recursive.BOARD_SIZE];
		int index = 0;
		for(int r = 0; r < result.length; r++)
			for(int c = 0; c < result.length; c++, index++)
				result[r][c] = puzzle.charAt(index) - '0';
		return result;
	}

	private static void printBoard(int[][] board) {
		for(int r = 0; r < board.length; r++) {
			for(int c = 0; c < board[r].length; c++) {
				System.out.print(board[r][c]);
				System.out.print(" ");
			}
			System.out.println();
		}
	}
}
